'''
Tyler Beaulieu
DS5020, Spring 2025
Nutella Implementation
February 18, 2025
'''

#Import the goods
import sys
from random import randint


#Define the function that will pick a random word.
def pick_random_word():
    '''
    Function pick_random_word
    Parameter: none
    Returns: Randomly selected word from word_list
    '''
    word_list = [
        "HAZELNUT", 
        "CHOCOLATE", 
        "DELICIOUS", 
        "SPREADABLE", 
        "CREAMY",
        "SWEETNESS", 
        "INDULGENT", 
        "BREAKFAST", 
        "DESSERTS", 
        "SPOONFUL",
        "SANDWICH", 
        "BUTTERY", 
        "TEMPTING", 
        "CRAVINGS", 
        "WAFFLES",
        "PANCAKE", 
        "TOPPINGS", 
        "TRAMPOLINE", 
        "SUGARY",
        "CANINE"]
    random_word=word_list[randint(0,19)]
    return random_word


#Define the function that will obfuscate the random word.
def create_hidden_word(random_word):
    '''
    Function: create_hidden_word
    Parameter: random_word generated by pick_random_word()
    Return: hidden_word
    Obfuscates the random_word
    '''
    hidden_word = "*" * len(random_word)
    return hidden_word


#Defines the function that will check if the user has successfully guessed a letter in the random word.
def letter_found(user_guess, random_word):
    '''
    Function: letter_found()
    Parameters: user_guess, hidden_word
    Returns: True if user_guess is in random_word False Otherwise
    Used to check if the user has successfully guessed the string.
    '''
    if user_guess in random_word:
        return True
    else:
        return False
    

#Defines the function that will check if the user has successfully guessed the random word.
def word_found(random_word, hidden_word):
    '''
    Function: word_found()
    Parameters: random_word, hidden_word
    Returns: True if hidden_word=rand_word, False Otherwise
    Used to check if the user has successfully guessed the string.
    '''
    if random_word == hidden_word:
        return True
    else:
        return False


#The function get_input will get the user input and make sure it is valid.
def get_input():
    '''
    Function: get_input
    Parameters: None
    Returns: your_letter
    '''
    your_letter=input("Please give me a letter: \n")
    verify = False
    while verify == False:
        #Check if the characters of the string are letters.
        if your_letter.isalpha() == False:
            your_letter=input("I said, please give me A LETTER: \n")
        #Check that user only entered one letter.
        elif len(your_letter) > 1:
            your_letter=input("Just one letter at time, thank you. Please give me a letter: \n")
        #Make string upper case and return
        else:
            verify = True
            your_letter=your_letter.upper()
            return your_letter


#Defines the function that will print a status based on the user's wrong guesses.    
def nutella_of_deliciousness(wrong_guesses):
    '''
    Function: nutella_of_deliciousness
    Parameters: wrong_guesses
    Returns: Nothing
    Used to print out more and more ASCII art of a nutella based on the user's incorrect guesses.
    '''
    abduction = [
        "*  .  ..  * .",
        ".    *   .  *",
        " _____________",
        "|_____________|",
        " /___________\ ",
        "|  _________  |",
        "| |         | |",
        "| | NUTELLA | |",
        "| |_________| |",
        "|_____________|",
        "  ",
        "  GAME OVER"]
    nut = 0
    print("")
    if wrong_guesses == 0:
        pass
    else:
        while nut < wrong_guesses:
            print(abduction[nut*2])
            print(abduction[nut*2 + 1])
            nut += 1

#Defines the function that will reveal obfuscated characters when the user guesses correctly.
def replace_character(random_word, hidden_word, user_guess):
    '''
    Function: replace_character
    Parameters: random_word, hidden_word, user_guess
    Returns: updated hidden_word
    Replaces all the occurences of user_guess in hidden_word with user_guess
    '''
    build_hidden = ""
    char_index = 0
    while char_index < len(random_word):
        if random_word[char_index] == user_guess:
            build_hidden = build_hidden + user_guess
        else:
            build_hidden = build_hidden + hidden_word[char_index]
        char_index += 1
    return build_hidden


#Main control flow.
def main():
    #Initial setup of various variables.
    wrong_guesses = 0
    random_word = pick_random_word()
    hidden_word = create_hidden_word(random_word)
    win_or_lose = False
    wrong_letters = ""

    #Print the initial user interface
    print("\n================================================\n")
    print("  (<>..<>)  Let's play Nutella!  (<>..<>)  \n")
    print("            --~~~=:>[XXXXXXXX]>\n")
    print("          Â©2025 DS5020 Games (not)\n            No Rights Reserved.\n")
    print(" Guess a letter to uncover the hidden word.\n")
    print("       6 wrong guesses and you lose.\n\n")
    print("Your word is:")
    print(hidden_word)

    #Loop to play the game.
    while win_or_lose == False:
        user_guess = get_input()
        print("\n================================================\n")
        
        #First conditional to assess if the guess was in the word or not.
        if letter_found(user_guess, random_word) == True:
            nutella_of_deliciousness(wrong_guesses)
            hidden_word = replace_character(random_word, hidden_word, user_guess)
            print("\nThere is a letter",user_guess,"\nWrong letters:",wrong_letters,"(",wrong_guesses,"of 6 )\n")
        else:
            wrong_guesses += 1
            wrong_letters += (user_guess+" ")
            nutella_of_deliciousness(wrong_guesses)
            print("\nThere is no letter",user_guess,"in",hidden_word,"\nWrong letters:",wrong_letters,"(",wrong_guesses,"of 6 )\n")
        
        #Second conditional to assess if the user has won or lost the game yet.
        if word_found(random_word,hidden_word) == True:
            
            print("\nYOU WIN! (^.^)\n\nThe hidden word was",random_word)
            win_or_lose = True
        elif wrong_guesses == 6:
            win_or_lose = True
            print("\nYOU HAVE FAILED TO GUESS THE WORD IN 6 GUESSES")
        else:
            print("Your word is:\n",hidden_word,"\n")

if __name__ == "__main__":

    main()